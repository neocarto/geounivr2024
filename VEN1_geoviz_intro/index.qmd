---
title: "introduction\n\nCartographier pour le Web avec `quarto`"
subtitle: "Monastir, Tunisie, 2024"
author: "Nicolas Lambert"
title-slide-attributes:
  data-background-color: black
  data-background-image: img/line.png
  data-background-size: cover
  data-background-opacity: "0.7"
format:
  revealjs:
    embed-resources: true
    smaller: true
    scrollable: true
    theme: [simple, custom.scss]
    code-line-numbers: false
editor: visual
execute:
  echo: true
---

# Le Web

## Internet et WWW

Internet est n√© d'une initiative militaire am√©ricaine. Le premier n≈ìud du r√©seau ARPANET (Advanced Research Project Agency Network) √† l'origine d'Internet a √©t√© mis en place en **1969**.

<img src="img/arpanet.webp" style="border:none"/></img>

**12 Mars 1989 : premi√®re version du Web** - Tim Berners-Lee, chercheur britannique au CERN, a invent√© le WWW.

<img src="img/9407011_31-A4-at-144-dpi.jpg" style="border:none"/></img>

A l‚Äôorigine, le projet, baptis√© ¬´ World Wide Web ¬ª, a √©t√© con√ßu et d√©velopp√© pour que des scientifiques travaillant dans des universit√©s et instituts du monde entier puissent s'√©changer des informations instantan√©ment.

<img src="img/premierweb.png" style="border:none"/></img>

::: {.callout-tip collapse="true"}
## Web ou Internet ?

Internet est une plateforme qui permet de faire parvenir des informations d‚Äôun ordinateur √† un autre. Le web, lui, est un moyen de visiter des pages de sites √† partir de navigateurs via des ordinateurs, des tablettes ou des smartphones.
:::

**1991** - le Web s‚Äôouvre √† tous.

En **1993**, la technologie devient publique. Le Web voit tr√®s vite son usage exploser sur Internet.

**fin 1994**, le nombre de serveurs web atteint les 10 000 !

Le lancement de **Netscape**, le premier navigateur r√©ellement grand public, participera aussi largement √† sa d√©mocratisation.

<img src="img/netscape.webp" style="border:none"/></img>

**Janvier 1994** : Yahoo !

Le nombre de sites explose, √† tel point qu‚Äôil devient tr√®s difficile pour l‚Äôinternaute b√©otien de s‚Äôy retrouver. Deux √©tudiants de Stanford, Jerry Yang et David Filo, d√©cident de cr√©er un gigantesque annuaire de sites, class√©s de fa√ßon th√©matique. Il va vite devenir le portail num√©ro 1 de la Toile.

<img src="img/yahoo.webp" style="border:none"/></img>

**1998** Google lance son moteur de recherche

<img src="img/google.webp" style="border:none"/></img>

**2010** : l‚Äô√©mergence du HTML5, le futur du Web

<img src="img/html5.png" style="border:none"/></img>

25 ans apr√®s son invention, le HTML fait une douce r√©volution, toujours sous l‚Äôimpulsion de **Tim Berners-Lee**. Gr√¢ce √† la cinqui√®me version du standard de balisage des pages Web ‚Äì et de nombreuses technologies associ√©es ‚Äì de nouveaux services √©mergent. Objectif de ce standard : transformer les pages Web, encore trop statiques, en v√©ritables programmes informatiques, qui n‚Äôauraient rien √† envier aux applications pour smartphones ou aux logiciels que vous installez sur votre ordinateur. Et faire du navigateur l‚Äôunique appli dont vous aurez besoin.

**Aujourd'hui**

Plus de 4 milliard d‚Äôutilisateurs

<img src="img/foule.jpg" style="border:none" width="100%"/></img>

## Les langages du Web

Derri√®re le web, il y a des langages informatiques qui sont interpr√©t√©s directement dans les navigateurs.

<img src="img/langage.png" style="border:none" width="50%"/></img>

### Le HTML

Le HyperText Markup Language, g√©n√©ralement abr√©g√© HTML est ce qui correspond au squelette d'une page web. C'est la structuration du document. Le HTML est structur√© par des **balises**.

``` html
<!DOCTYPE html>
<html>
<head>
<title>Page Title</title>
</head>
<body>

<h1>This is a Heading</h1>
<p>This is a paragraph.</p>

</body>
</html>
```

### Le CSS

Les feuilles de style en cascade, g√©n√©ralement appel√©es CSS de l'anglais Cascading Style Sheets, forment un langage informatique qui d√©crit la pr√©sentation des documents HTML. Le CSS d√©finit le **style** et le **positionnement** des √©l√©ments sur la page.

``` css
body {
  background-color: lightblue;
}

h1 {
  color: white;
  text-align: center;
}

p {
  font-family: verdana;
  font-size: 20px;
}
```

### Canvas

Depuis HTML5, on peut directement dessiner dans le navigateur web. Avec Canvas en mode raster (pixels)

Ce code

``` html
<canvas id="myCanvas2" width="100" height ="100" style="border:1px
solid #000000; background-color: steelblue;"></canvas>
```

donne ceci :

<canvas id="myCanvas2" width="100" height="100" style="border:1px solid #000000; background-color: steelblue;">

</canvas>

### SVG

Le format SVG (Scalable Vector Graphics) est un format de donn√©es con√ßu pour d√©crire des ensembles de graphiques vectoriels. C'est le format qu'on utilise dans le logiciel **Inkscape**.

Ce code

``` html
<svg viewBox="0 0 1000 100" xmlns="http://www.w3.org/2000/svg">
  <rect x="0" y="0" width="100px" height="100px" fill="#F2CD3B" stroke="#06000C" />
</svg>
```

donne ceci :

<svg viewBox="0 0 1000 100" xmlns="http://www.w3.org/2000/svg">
<rect x="0" y="0" width="100px" height="100px" fill="#F2CD3B" stroke="#06000C"/>
</svg>

Attention, les coordonn√©es \[0,0\] sont en haut √† gauche.

![](img/canvas.png)

### Le JavaScript

C'est le langage de script du navigateur.

<img src="img/javascript.png" style="border:none"/></img>

::: notes
C'est un vieux langage qui n'a pas √©t√© concu pour l'analyse de donn√©es. Mais c'est le langage du web. Il fonctionne sur tous les navigateurs web sans avoir besoin d'installer quoi que ce soit. Ce langage peut √™tre √©tendu pour devenir un langage d√©di√© √† la dataviz.
:::

## Le JavaScript

Le JavaScript est un langage de programmation qui a presque 30 ans.

### 1995

![](img/javascript.png){height="100"}

Le langage Javascript a √©t√© cr√©√© en dix jours en mai 1995 pour la Netscape Communications Corporation par **Brendan Eich**. Au d√©part, l'id√©e √©tait de construire un petit langage pour faire des interactions sur les pages web. Attention, Javascript n'est pas JAVA !

### 1997

![](img/ecma.png){height="65"}

Le langage Javascript est normalis√© depuis 1997 par la commission TC39 de l'organisation ECMA International.

### 2008

Les navigateurs web ont travaill√© √† de nouveaux moteurs pour am√©liorer les performances. **V8** est un moteur JavaScript open-source d√©velopp√© par le projet Chromium pour les navigateurs Web Google Chrome et Chromium (derni√®re version 31 janvier 2022). Il y a aussi **SpiderMonkey** pour Firefox, **Chakra** pour Microsoft Edge et **JavaScriptCore** pour Safari.

### 2009

![](img/node.png){height="100"}

Cr√©ation de Node.js par **Ryan Dahl**, qui permet d'utiliser le JavaScript comme langage de programmation c√¥t√© serveur (back-End).

### 2015

Depuis 2015 (ES6 ou ES2015), le langage JavaScript est mature. Performant. Et est impl√©ment√© de mani√®re harmonis√©e dans tous les navigateurs. On parle de *modern JavaScript*

### demain ?

De nouvelles fonctionnalit√©es sont ajout√©es au langage chaque ann√©e.

Voir : [observablehq.com/\@robertbatty/ecmascript-2015-2022](https://observablehq.com/@robertbatty/ecmascript-2015-2022)

### Une grande communaut√©

C'est un langage ancien qui dispose d'une tr√®s grande communaut√©.

::: columns
::: {.column width="49%"}
JavaScript est √† ce jour un des langages les plus utilis√© par les developpeurs informatiques.<br/><img src="img/popularityjs.png" style="border:none"/></img><br/>
:::

::: {.column width="49%"}
Il y a √† ce jour plus de 2 millions de packages disponibles sur **npm**<br/><img src="img/npm1.png" style="border:none"/></img>
:::
:::

### JavaScript permet de dessiner dans le navigateur

```{ojs}
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
  svg
    .append("circle")
    .attr("cx", 50)
    .attr("cy", 30)
    .attr("r", 25)
    .style("fill", "#e04a28");
    
  return svg.node();
}    
```

### JavaScript n‚Äôa pas √©t√© con√ßu pour l‚Äôanalyse de donn√©es

Par exemple, l'op√©ration de tri par d√©faut trie les valeurs par ordre alphab√©tique.

```{ojs}
{
let a = [7,1,9,3,10,4,5,6,2,8]
return a.sort()
}
```

### Mais incontournable et prometeur

-   C'est le langage du web
-   Grande communaut√©
-   Langage de plus en plus performant
-   De nombreuses biblioth√®ques existent d√©j√† Du coup, certains pensent que le JavaScript est le langage de demain pour traiter et analyser des donn√©es.

![](img/towards.png)

*https://towardsdatascience.com/javascript-for-data-analysis-2e8e7dbf63a7*

# Observable Javascript üìä

::: notes
Observable Javascript est une √©volution du langage JavaScript pour en faire un langage d√©dui√© √† l'analyse et la visualisation de donn√©es.
:::

Un langage d√©di√© √† la visualisation de donn√©es pour le web

## Observable, kezako ?

L'<b>Observable javascript (ojs)</b> est un ensemble d'am√©liorations apport√©es √† vanilla JavaScript cr√©√© par Mike Bostock (√©galement auteur de D3). Observable JS se distingue par son ex√©cution r√©active, qui convient particuli√®rement bien √† l'exploration et √† l'analyse interactives des donn√©es. Objectif : faire collaborer une communaut√© autour de la visualisation de donn√©es.

![](img/chronologie.png)

<b>Observable</b> est aussi une startup fond√©e par Mike Bostock et Melody Meckfessel, qui propose une plateforme 100% en ligne pour concevoir, partager et diffuser des visualisations de donn√©es.

![](img/observable.png){height="200"}

C'est aussi une <b>plateforme web disponible √† l'adresse **https://observablehq.com/** qui h√©berge des *notebooks*</b> *computationnels* sur la visualisation de donn√©es.

Les notebooks sont comme des billets de blog. Ils contiennent du texte, des images et du contenu multim√©dia. Ils peuvent √™tre rang√©s dans des collections. Ils sont disponibles en ligne via une url. Comme on peut s'y attendre, ils contiennent aussi des lignes de code. L'objectif : faire de la Programmation lettr√©e (<b>literate programming</b>).

![](img/obs.png)

<b>R√©f√©rences</b>

Reactive, reproducible, collaborative: computational notebooks evolve, par Jeffrey M. Perkel. <https://www.nature.com/articles/d41586-021-01174-w>

Javascript for data Analysis, par Mike Bostock <https://towardsdatascience.com/javascript-for-data-analysis-2e8e7dbf63a7>

## Observable notebooks

Les notebooks Observable permettent de travailler en ligne, directement dans le navigateur, sans avoir besoin d'installer le moindre logiciel. Il faut bien sur avoir une bonne connexion internet.

![](img/observable2.png)

Par exemple : [https://observablehq.com/trending](https://observablehq.com/trending)

## Observable framework

Depuis cette ann√©e, Observable a lanc√© un nouvel outil nomm√© **Observable Framework**

![](img/framework.png)

## Observable dans Quarto

![](img/quarto.png){height="50"}

Quarto permet de cr√©er des documents markdown, des articles, des rapports, des pr√©sentations, des sites web, des blogs et des livres, aux formats HTML, PDF, Word, ePub, etc.

Il permet de cr√©er un contenu dynamique dans diff√©rents langages : Python, R, Julia et **Observable JavaScript**.

Cela permet de cr√©er des documents, des rapports et des analyses enti√®rement reproductibles

![](img/quartoojs.png)

## JavaScript ‚â† ojs

::: columns
::: {.column width="49%"}
OJS c'est du JavaScript + plein de biblioth√®ques pr√© charg√©es : <br/>

| Symbol   | Name              | Version            |
|----------|-------------------|--------------------|
| \_       | Lodash            | 4.17.21            |
| aq       | Arquero           | \${aq.version}     |
| Arrow    | Apache Arrow      | 4.0.1              |
| d3       | D3.js             | \${d3.version}     |
| dot      | Graphviz          | 0.2.1              |
| htl      | Hypertext Literal | \${htl.version}    |
| Inputs   | Observable Inputs | \${Inputs.version} |
| L        | Leaflet           | \${L.version}      |
| mermaid  | Mermaid           | 9.1.6              |
| Plot     | Observable Plot   | \${Plot.version}   |
| SQLite   | SQL.js            | 1.7.0              |
| topojson | TopoJSON Client   | 3.1.0              |
| vl       | Vega, Vega-Lite   | 5.22.1, 5.2.0      |
:::

::: {.column width="49%"}
OJS c'est aussi une √©volution du langage javascript pour en faire un langage adapt√© √† l'analyse et la visualisation de donn√©es sur le web.

![](img/datascience.png)
:::
:::

## Les cellules / chunk {ojs}

Dans Quarto, on peut √©crire/ex√©cuter du code Observable en utilisant des chuncks **{ojs}**.

Chaque ligne d√©finit une variable et une cellule qui doit √™tre unique.

cellule 1 :

```{ojs}
a = 5 
```

cellule 2 :

```{ojs}
b = 7 
```

cellule 3 :

```{ojs}
a + b
```

Avec ojs, l'ordre d'√©criture n'a pas d'importance ü§î On peut donc √©crire :

Ceci :

```{ojs}
c * d 
```

Avant √ßa

```{ojs}
c = 3
```

et √ßa

```{ojs}
d = 8
```

La raison est que la relation entgre les cellules s'effectue de mani√®re topologique.

![](img/topo.png){height="400"}

Chaque cellule doit imp√©rativement √™tre unique. En cons√©quance, je n'ai pas le droit de red√©finir une de ces variables.

```{ojs}
e = 10
e = 5
```

Il est donc souvent utile de cr√©er des blocs de code avec des {...} quand le traitement devient plus complexe.

```{ojs}
{
  let val1 = 8;
  let val2 = 7;
  val1 = 5;
  return val1 * val2;
}

```

Mais la plupart du temps, pour faire ce genre de calcul, on √©crira plut√¥t des fonctions. Comme ceci :

```{ojs}
function sum(a, b) {
  return a + b;
}
// Appel de la fonction
sum(10, 30)
```

Ou comme cela :

```{ojs}
multi = (a, b) => a * b
// Appel de la fonction
multi(3, 8)
```

Ce parti pris fort, peut √™tre d√©routant. Mais il a un gros avantage. Il permet d'organiser un document ind√©pendemment de la fa√ßon dont on code. Cela permet par exemple de mettre une carte en haut de la page et en annexe technique tout en bas le code qui la g√©n√®re.

## Les Inputs

Dans Observable, on a √† disposition des *Inputs* directement pr√™ts √† l'emploi.

### üëâ button

```{ojs}
viewof clicks = Inputs.button("Click")
clicks
```

### üëâ toogle

```{ojs}
viewof mute = Inputs.toggle({label: "Mute", value: true})
mute
```

### üëâ range

```{ojs}
viewof gain = Inputs.range([0, 11], {value: 5, step: 0.1, label: "Gain"})
gain
```

### üëâ checkbox

```{ojs}
viewof colors = Inputs.checkbox(["red", "green", "blue"], {label: "color"})
colors
```

### üëâ radio

```{ojs}
viewof color = Inputs.radio(["red", "green", "blue"], {label: "color"})
color
```

### üëâ select

```{ojs}
villes = ["Sousse", "Monastir", "Sfax"]
viewof maville = Inputs.select(villes, {value: "steelblue", label: "Choisissez une ville"})
maville
```

### üëâ text

```{ojs}
viewof text = Inputs.text()
text
```

### üëâ textarea

```{ojs}
viewof textarea = Inputs.textarea()
textarea
```

### üëâ date

```{ojs}
viewof date = Inputs.date()
date
```

### üëâ color

```{ojs}
viewof pickcolor = Inputs.color({label: "couleur pr√©f√©r√©e", value: "#4682b4"})
pickcolor
```

### üëâ file

```{ojs}
viewof file = Inputs.file()
file
```

### üëâ formulaire

```{ojs}
//| panel: sidebar
//| echo: false
viewof range1 = Inputs.range([0, 11], {value: 5, step: 0.1, label: "range1"})
viewof range2 = Inputs.range([0, 11], {value: 5, step: 0.1, label: "range2"})
viewof range3 = Inputs.range([0, 11], {value: 5, step: 0.1, label: "range3"})
```

```{ojs}
//| panel: fill
range1
range2
range3

```

## Tout est r√©actif üî•

Dans Observable, gr√¢ce √† la relation topologique entre les cellules, tout est r√©actif. Chaque fois qu'on bouge quelque chose, ce qui en d√©pend est r√©-√©x√©cut√©.

```{ojs}
viewof age = Inputs.range([15, 70], {label: "age", value: 30, step: 1,})
viewof nom = Inputs.text({label: "nom", value: "Nicolas"})
```

Par exemple :

```{ojs}
md`Je m'appelle **${nom}** et j'ai **${age}** ans :-)`
```

Reprenons notre SVG de tout √† l'heure

```{ojs}
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
  svg
    .append("circle")
    .attr("cx", 50)
    .attr("cy", 30)
    .attr("r", 25)
    .style("fill", "#e04a28");
    
  return svg.node();
}
```

On peut facilement proposer √† l'utilisateur de modifier ce dessin en rempla√ßant des valeurs par des variables pilot√©es par des inputs.

```{ojs}
//| echo: true
//| eval: false
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
  svg
    .append("circle")
    .attr("cx", cx)
    .attr("cy", 30)
    .attr("r", r)
    .style("fill", col);
    
  return svg.node();
}
```

Par exemple :

```{ojs}
//| panel: input
//| echo: true
viewof cx = Inputs.range([30, 470], {value: 50, step: 1, label: "position"})
viewof col = Inputs.color({ value: "#e04a28", label: "couleur"})
viewof r = Inputs.range([5, 30], {value: 25, step: 0.1, label: "rayon"})
```

```{ojs}
//| echo: false
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
  svg
    .append("circle")
    .attr("cx", cx)
    .attr("cy", 30)
    .attr("r", r)
    .style("fill", col);
    
  return svg.node();
}
```

## Les donn√©es

L'ajout de donn√©es s'effectue avec l'instruction `FileAttachment()`

### üëâ fichier csv

```{ojs}
data1 = FileAttachment("data/afrika_data.csv").csv()
```

Les donn√©es sont import√©es et converties automatiquement au format json

```{ojs}
//| echo: false
data1
```

Pour les visualiser, on utilise `Inputs.table()`

```{ojs}
Inputs.table(data1)
```

### üëâ fichier xlsx

On peut √©galement importer des fichiers excel

```{ojs}
classeur = FileAttachment("data/afrika.xlsx").xlsx()
```

On obtient la liste des feuilles comme cela :

```{ojs}
classeur.sheetNames
```

Puis, on peut choisir la feuille √† ouvrir

```{ojs}
data2 = classeur.sheet("data", {
  headers: true
})
```

```{ojs}
//| echo: false
data2
```

### üëâ Mise en forme des donn√©es

Pour mettre en forme les donn√©es, on peut le faire en pure JavaScript.

```{ojs}
subdata1 = data1
  .filter((d) => +d.ESPVIE > 65)
  .map((d) => ({ code: d.iso3, nom: d.nom, POP: d.POP, PIB: d.PIB, ESPVIE: d.ESPVIE }))
  .sort((a, b) => d3.descending(b.ESPVIE, a.ESPVIE))
```

Ca donne ceci :

```{ojs}
//| echo: false
Inputs.table(subdata1)
```

On peut aussi utiliser `arquero`. Voir : [https://observablehq.com/\@observablehq/data-wrangler](@observablehq/data-wrangler).

```{ojs}
subdata2 = aq
  .from(data1)
  .filter((d) => d["ESPVIE"] > 65)
  .rename({ iso3: "code" })
  .select("code", "nom", "POP", "PIB", "ESPVIE")
  .orderby("ESPVIE")
  .objects()
```

Le r√©sultat est le m√™me.

```{ojs}
//| echo: false
Inputs.table(subdata2)
```

### üëâ fichier geoJSON

Pour utiliser des g√©om√©tries, on utilisera prioritairement le format geoJSON.

```{ojs}
basemap = FileAttachment("data/africa.json").json()
```

Voil√† la structure d'un geoJSON

```{ojs}
//| echo: false
basemap
```

Et voici √† quoi il ressemble si on l'affiche (nous verrons plus tard comment...)

```{ojs}
//| eval: true
//| echo: false
viz = require("geoviz@0.5.9")
{
let svg = viz.create({domain: basemap, width: 500, zoomable:true})
svg.path({data: basemap, tip: true, fill:"red",})
return svg.render()
}
```

## Librairies externes

Observable javascript n'est pas un √©cosyst√®me ferm√©. Des millions de librairies javascript existent sur NPM (√©quivalent du CRAN pour R). Il est possible de les utiliser.

![](img/npm.png)<br/>

Ici, nous pouvons les importer directement avec l'instruction `require()`

```{ojs}
geo = require("geotoolbox")
```

G√©n√©ralisation cartographique

```{ojs}
//| eval: false
//| echo: true
viewof k = Inputs.range([0.01, 0.5], { label: "k", step: 0.01, value: 0.05 })
geo.simplify(world, { k })
```

```{ojs}
//| eval: true
//| echo: false
world = FileAttachment("data/world.json").json()
viewof k = Inputs.range([0.01, 0.5], { label: "k", step: 0.01, value: 0.05 })
world_light = geo.simplify(world, { k })
{
let svg = viz.create({domain: world, width: 500})
svg.path({data: world_light, tip: true, fill:"none",stroke:"red"})
return svg.render()
}
```

## Imports

On l'a dit tout √† l'heure, Observable c'est aussi une plateforme web h√©bergeant des notebooks.

![](img/trendings.png)<br/>

Si on a une connexion internet, il ets possible d'importer n'importe quelle cellule de n'importe quel notebook avec la fonction `import`. Dit autrement, toutes les notebooks h√©berg√©s sur observablehq.com fonctionnent comme des api.

```{ojs}
import {SankeyChart} from "@d3/sankey"
import {energy} from "@d3/sankey"
```

Puis, on peut utiliser cette fonction.

```{ojs}
chart = SankeyChart({
  links: energy
}, {
  nodeGroup: d => d.id.split(/\W/)[0], // take first word for color
  width,
  height: 600
})
```

# Travaux pratiques

üëâ [let's go](https://neocarto.github.io/geounivr2024/VEN1_geoviz_TP/docs/index.html)
