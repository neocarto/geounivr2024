---
title: "GEO UNIV'R Tunisie 2024"
subtitle: "Faire des cartes th√©matiques avec R"
date: "`r Sys.Date()`"
author: "Nicolas Lambert, Elina Marveaux, Ronan Ysebaert"
format:
  html:
    embed-resources: true
    theme: yeti
    smooth-scroll: true
    fontsize: 0.9em
    toc: true
editor_options: 
  chunk_output_type: console
---

![](./img/contourlines.png)

::: callout-note
Ce support est tr√®s largement inspir√© du manuel [`Cartographie avec R`](https://rcarto.github.io/cartographie_avec_r/) r√©alis√© par Timoth√©e Giraud et Hugues P√©cout. Et on les en remercie chaleureusement üôè
:::

## Pakages utilis√©s dans cette session.

Les principaux packages utilis√©s dans cette section sont :

-   `sf`
-   `mapsf`

## Initiez un nouveau projet

-   Cr√©ez un nouveau r√©pertoire de travail.
-   Ouvrez Rstudio.
-   Cr√©ez un nouveau projet et placez-le dans votre dossier.
-   Cr√©ez un nouveau document Quarto (ou √©ventuellement un simple script R si vous pr√©f√©rez)

Si vous n'avez pas les packages list√©s plus haut, vous pouvez les installer en tapant la ligne suivante dans la console.

```{r}
#| eval: false
install.packages(c('sf', 'mapsf'))
```

Dans cette s√©quence, nous travaillons √† l'√©chelle des pays africains. Les donn√©es statistiques sont issues de la base de donn√©es de la banque mondiale.

Les donn√©es sont disponibles au t√©l√©chargement ici.

<a href = "https://github.com/neocarto/geounivr2024/raw/main/MAR_2_carto/data/afrique.zip"><img src="img/download.png" height="50px"/><img /></a>

T√©l√©chargez-les, d√©zippez-les et placez-les dans un r√©pertoire **data**.

Tout est pr√™t üòé

## Import et mise en forme des donn√©es

1 - Import des g√©om√©tries

```{r}
#| output: false
library("sf")
```

On dispose d'un fichier geopackage contenant plusieurs g√©om√©tries

```{r}
st_layers("data/afrique.gpkg")
```

On importe la couche correspondant aux pays africains et on la reprojette en projection Pseudo-Mercator.

```{r}
#| output: false
geom <- st_transform(st_read("data/afrique.gpkg", layer = "africa"),"epsg:3857")
```

::: {.callout-note collapse="true"}
## Contenu du Spatial\*DataFrame

```{r}
#| echo: false
head(geom,4)
```
:::

2 - Import des donn√©es statistiques issues de la banque mondiale.

```{r}
#| output: false
data <- read.csv("data/worldbank_africa.csv")
```

::: {.callout-note collapse="true"}
## Liste des variables disponibles

```{r}
#| echo: false
meta <- read.csv("data/worldbank_africa_meta.csv")
meta[,c("id", "type","description")]
```
:::

3 - Jointure

```{r}
#| output: false
africa <-  merge(
  x = geom[,"ISO3"],  
  y = data,  
  by.x = "ISO3",
  by.y = "id",
  all.x = TRUE   
)
```

On dispose maintenant du Spatial\*DataFrame `africa` qui contient √† la fois des donn√©es et des g√©om√©tries.

Et on ajoute quelques couches additionnelles

```{r}
#| echo: true
#| output: false

world <- st_transform(st_read("data/afrique.gpkg", layer = "world"),"epsg:3857")
places <- st_transform(st_read("data/afrique.gpkg", layer = "ne_10m_populated_places"),"epsg:3857")
rail <- st_transform(st_read("data/afrique.gpkg", layer = "ne_10m_railroads"),"epsg:3857")
roads <- st_transform(st_read("data/afrique.gpkg", layer = "ne_10m_roads"),"epsg:3857")
```

# 1 - cartographie avec `sf`

Gr√¢ce au package `sf`, la fonction `plot()` est √©tendue et permet l'afficher d'un Spatial\*DataFrame comme n'importe quel graphique.

### Comportement par d√©faut

Par de faut, la fonction renvoie une image pouvant contenir jusqu'√† 10 cartes, chaque carte correspondant √† une colonne.

```{r}
#| warning: false
plot(africa)
```

Si il y a plus de 10 colonnes dans le jeu de donn√©es, alors on ajoute la param√®tre `max.plot = ncol(africa) - 1` (le nombre de colonnes total moins la colonne de g√©om√©tries).

```{r}
plot(africa, max.plot = ncol(africa) - 1)
```

On per√ßoit que les couleurs ne sont pas choisies totalement au hasard. Nous verrons un peu plus tard comme cela fonctionne.

Si on souhaite afficher simplement les g√©om√©tries, on utilise la fonction `st_geometry()`

```{r}
#| warning: false
plot(st_geometry(africa))
```

Ou alors, en s√©lectionnant le champ contenant les g√©om√©tries.

```{r}
#| warning: false
plot(africa$geometry)
```

### Marges en emprise

Dans les affichages pr√©c√©dents, on constate qu'il y a beaucoup d'espace perdu autour de la carte. On peut modifier les marges en modifiant les param√®tres graphiques. `mar` permet de mettre les marges √† z√©ro. `xaxs='i'`, `yaxs='i'` permettent de supprimer les espaces r√©siduels.

```{r}
par(mar = c(0, 0, 0, 0),  xaxs='i', yaxs='i', bg = "#F1F3F5") # c(bottom, left, top, right))
plot(st_geometry(africa))
```

Quand on travaille dans un document quarto, il est √©galement possible de modifier la taille des figures avec les param√®tres `fig-height` et `fig-width`. Soit dans le yaml en haut du document. Soit directement dans le chunk.

Ici, on d√©termine le bon ratio entre la hauteur et la largeur.

```{r}
bb <- st_bbox(africa)
ratio <- (bb$xmax - bb$xmin) / (bb$ymax - bb$ymin) 
height <- 6
width <- height * ratio
width
```

Puis on √©crit

``` r
#| fig-heigth: 6
#| fig-width: 6.36
```

Et on obtient une carte qui prend bien tout l'espace souhait√©.

```{r}
#| fig-height: 6
#| fig-width: 6.36
par(mar = c(0, 0, 0, 0), bg = "#F1F3F5", xaxs='i', yaxs='i')
plot(st_geometry(africa))
```

Enfin, notez qu'avec `xlim` et `ylim`, vous pouvez cadrer la carte sur une emprise particuli√®re. Par exemple ici, on affiche le fond de carte du monde mais uniquement avec l'emprise de l'Afrique.

```{r}
par(mar = c(0, 0, 0, 0), xaxs='i', yaxs='i')
bb <- st_bbox(africa)
plot(st_geometry(world), xlim = c(bb$xmin, bb$xmax), ylim = c(bb$ymin, bb$ymax))
```

### Param√©trer le style

De nombreux param√®tres permettent de personnaliser le style de la carte. Nous en citons ici quelques exemples.

-   Couleur de fond : `col`
-   Couleur de contour : `border`
-   Epaisseur des trac√©s : `lwd`

```{r}
#| fig-height: 6
#| fig-width: 6.36
par(mar = c(0, 0, 0, 0), bg = "#F1F3F5", xaxs='i', yaxs='i')
plot(st_geometry(africa), col = "#5b89a3", border = "white", lwd = 0.5)
```

::: {.callout-tip collapse="true"}
NB : Il y a 657 noms de couleurs disponibles dans R. Pour les afficher, vous pouvez taper `colors()`

```{r}
cols <- colors()
head(cols, 20)
```
:::

Avec `lty`, on peut √©galement changer le type de traits

<img src="./img/lty.png" width="200px"/></img>

```{r}
#| fig-height: 6
#| fig-width: 6.36
par(mar = c(0, 0, 0, 0), bg = "#F1F3F5", xaxs='i', yaxs='i')
plot(st_geometry(roads), lty = 3)
```

Avec `pch`, on peut choisir le s de symbole. Avec `cex`, on d√©termine sa taille.

<img src="./img/pch.png" width="300px"/></img>

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
par(mar = c(0, 0, 0, 0), bg = "#F1F3F5", xaxs='i', yaxs='i')
plot(st_geometry(places), pch = 17, col = "red", cex = 1)
```

### Supperposer des couches

Pour superposer des couches, vous pouvez simplement utiliser le param√®tre `add = TRUE` (sous r√©serve que les couches soient dans le m√™me syst√®me de coordonn√©es)

```{r}
#| fig-height: 6
#| fig-width: 6.36
par(mar = c(0, 0, 0, 0), bg = "#F1F3F5")
plot(st_geometry(africa), col = "#5b89a3", border = "white", lwd = 0.5)
plot(st_geometry(roads), col = "red", add = TRUE)
plot(st_geometry(places), pch = 19, col = 'black', cex = 0.5, add = TRUE)
```

### Autres √©l√©ments

Il est possible d'ajouter d'autres √©l√©ments √† la mise en page.

-   Les axes : `axes = TRUE/FALSE`
-   Graticule : `graticule = TRUE`
-   Titre = `main = "Hello"`

Par exemple :

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
par(mar = c(0, 0, 2, 0))
plot(st_geometry(africa), col= "white", axes = TRUE, graticule = TRUE, main = "Hello")
```

## Effet d'ombrage

Avec R, il est ais√© de translater une g√©om√©trie pour cr√©er un effet d'ombrage.

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
par(mar = c(0, 0, 0, 0))
plot(st_geometry(africa) + c(50000,-50000), col = "#827e6c80", border = NA)
plot(st_geometry(africa) , col = "#5B89A3", border = NA, add = TRUE)
```

::: callout-tip
## Astuce

On peut faire varier la transparence d'une couleur au format hexad√©cimal en ajouter un nombre de 00 √† 99 √† la fin du code. Par exemple `#827e6c60` applique une opacit√© de 60% √† la couleur `#827e6c`.
:::

On peut m√™me imaginer cet ombrage en d√©gard√© avec une boucle

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36

delta <- 20000
nb <- 15
par(mar = c(0, 0, 0, 0))
plot(st_geometry(africa) , col = NA, border = NA)
for (i in 1:nb) {
plot(st_geometry(africa) + c(i * delta,-i * delta), col = "#827e6c20", border = NA, add = TRUE)
}
plot(st_geometry(africa) , col = "#5B89A3", border = NA, add = TRUE)
```

## Cartographie th√©matique

Avec le package `sf`, il est (un peu) possible de r√©aliser des cartes th√©matiques. Rappelez-vous les couleurs de tout √† l'heure. Dans le cas o√π un seul attribut est s√©lectionn√©, une l√©gende est attribu√©e par d√©faut √† c√¥t√© de la carte. Ici, une donn√©e qualitative.

```{r}
plot(africa["region"])
```

Le positionnement de la l√©gende peut √™tre d√©fini par le param√®tre `key.pos` (1 = dessous, 2 = gauche, 3 = dessus et 4 = droite). Sa taille peut √©galement √™tre modifi√©e avec les param√®tres `key.width` et `key.length`

```{r}
plot(africa["region"], key.pos = 1, key.length = 1)
```

Si on souhaite cartographier une variable quantitative, la palette par d√©faut est diff√©rente.

```{r}
plot(africa["pop"])
```

Grace au param√®tre `breaks`, il est possible de donner ses propres classes de valeur ou de donner une m√©thode de discr√©tisation (m√©thodes du package `classInt`).

```{r}
plot(africa["pop"], breaks = "jenks")
```

### Exports

Ici, on a affich√© toutes les cartes dans le document. Mais on peut √©galement choisir de les construire dans un format donn√© (pdf, svg, png, ps, etc.), ce qui peut √™tre utile pour les retravailler dans un logiciel de DAO. Par exemple, on peut √©crire :

```{r}
#| output: false
svg("my_plot.svg")
plot(st_geometry(africa))
dev.off() 
```

### Bilan et limites

::: {.callout-important title="Que retenir ?"}
Les fonctions de cartographies dans les fonctionnalit√©s de base de `sf` sont tr√®s limit√©es. On ne peut pas, par exemple, dessiner des symboles proportionnels et leur l√©gende associ√©e. Si on veut aller plus loin, on a besoin d'un package sp√©cialis√© en repr√©sentations cartographiques. C'est √† ce besoin que r√©pond le package `mapsf`.
:::

# 2 - le package `mapsf`

`mapsf` permet de cr√©er la plupart des types de carte utilis√©s habituellement en cartographie statistique (cartes choropl√®thes, typologies, symboles proportionnels ou gradu√©s‚Ä¶).

<img src="img/mapsf.png" width="250px"/></img>

Pour chaque type de carte, plusieurs param√®tres permettent de personnaliser la repr√©sentation cartographique. Ces param√®tres sont les m√™mes que ceux que l‚Äôon retrouve dans les logiciels de SIG ou de cartographie usuels. `mapsf` est le successeur du package `cartography`. Si vous avez l'habitude d'utiliser ce dernier, nous vous conseillons vivement d'utiliser dor√©navant `mapsf`.

On charge le package

```{r}
library("mapsf")
```

## Documentation et supports

De nombreux documents permettent de prendre en main ce package.

-   Le [site web](https://riatelab.github.io/mapsf)
-   La [feuille de triche](https://raw.githubusercontent.com/riatelab/mapsf/master/vignettes/web_only/img/mapsf_cheatsheet.pdf)
-   Le manuel [cartographie avec R](https://rcarto.github.io/cartographie_avec_r/)

Et surtout, il faut aller voir dans la documentation du package directement dans RStudio. Vous y d√©couvrirez une magnifique vignette.

## Afficher un fond de carte

La fonction `mf_map()` est la fonction centrale du package `mapsf`. Elle remplace la fonction *plot*. Elle permet de r√©aliser la plupart des repr√©sentations usuelles en cartographie. Par d√©faut, elle permet d'afficher un fond de carte.

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_map(africa)
```

 La fonction `mf_title()` permet d'ajouter un titre √† la place de *main*. Avec `add = TRUE`, on peut supproposer des couches.

::: callout-tip
## Astuce
En affichant une premi√®re couche avec `border = NA` et `col = NA`, on peut ajouter un calque vide pour fixer l'emprise de la carte
:::

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_map(x = africa, border = NA, col = NA)
mf_map(x = world, border = "white", col = "#CCCCCC50", lwd = 0.5, add = TRUE)
mf_map(x = africa, border = "white", col = "#6893d9", lwd = 0.5, add = TRUE)
mf_map(x = places, pch = 20, cex = .7, col = "darkred", add = TRUE)
mf_title(txt = "L'Afrique")
```

::: callout-tip
## Astuce

Pour d√©terminer la taille de la figure, vous pouvez utiliser la fonction `mf_get_ratio()`
:::

## Symboles proportionnels

Pour repr√©senter une donn√©e quantitative absolue (i.e. donn√©e de stock), on utilise la fonction `mf_map` avec le param√®tre `type = "prop"`

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_map(x = africa, border = "white", lwd = 0.5)
mf_map(x = africa,
       var = "pop",
       type = "prop",
       border = "white",
       col = "#FF000080",
       leg_title = "Nombre d'habitants\nen 2020",
       inches	= 0.4 # taille du plus grand symbole
)
mf_title(txt = "Population totale")
```

::: callout-tip
## Astuce

Pour dessiner des carr√©s au lieu des cercles, vous pouvez utiliser `symbol = "square"`
:::

## Symboles gradu√©s

Avec le type `"grad"`, vous pouvez r√©aliser la m√™me carte avec des symboles gradu√©s (ce qui dans le cas de figure ici, est moins efficace). Pour cela, vous devez choisir un nombre de classes (`nbreaks`) et une m√©thode de discr√©tisation (`breaks`).

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_map(x = africa, border = "white", lwd = 0.5)
mf_map(x = africa,
       var = "pop",
       type = "grad",
       nbreaks = 5,
       method = "quantile",
       border = "white",
       col = "#FF000080",
       leg_title = "Nombre d'habitants\nen 2020",
       inches	= 0.4)
mf_title(txt = "Population totale (classes de tailles)")
```

## Carte choropl√®the

Pour repr√©senter des donn√©es quantitatives relatives (ratio, indices, √©chelles...), on utilisera la plupart du temps des d√©grad√©s de couleurs. Dans `mapsf`, cela s'effectue avec le type `"choro"`. Comme pr√©c√©demment, les param√®tres `nbreaks` et `breaks` permettent de param√©trer les discr√©tisations.

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_map(x = africa,
       var = "gdppc",
       type = "choro",
       nbreaks = 5,
       border = "white",
       leg_title = "PIB par habitant\n(US$ courants)")
mf_title(txt = "Richesse des pays d'Anfrique en 2020")
```

Par d√©faut, la m√©thode de discr√©tisation est la m√©thode des **quantiles**. Elle s'adapte donc √† n'importe quelle distribution de donn√©es. Mais avant de r√©aliser une carte choropl√®the, il est pr√©f√©rable d'√©tudier d'abord la distribution statistique de la variable que l‚Äôon souhaite cartographier. La fonction `mf_distr()` permet de visualiser cette distributions.

```{r}
mf_distr(africa$gdppc)
```

Ici, la s√©rie est dissym√©trique √† gauche, on peut donc opter plut√¥t pour la m√©thode `"geom"` qui est adapt√©e √† ce type de distribution (les m√©thodes disponibles sont : `"fixed"`, `"sd"`, `"equal"`, `"pretty"`, `"quantile"`, `"kmeans"`, `"hclust"`, `"bclust"`, `"fisher"`, `"jenks"`, `"dpih"`, `"q6"`, `"geom"`, `"arith"`, `"em"` ou `"msd"`).

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_map(x = africa,
       var = "gdppc",
       type = "choro",
       breaks = "geom",
       nbreaks = 4,
       border = "white",
       leg_title = "PIB par habitant\n(US$ courants)")
mf_title(txt = "Richesse des pays d'Afrique en 2020 (method = 'geom')")
```

Pour changer les couleurs, vous pouvez renseigner une palette de couleur avec l'argument `pal`. Par exemple :

```{r}
#| eval: false
pal = "Magenta"
```

![](img/palettes.svg)

Si vous le souhaitez, vous pouvez aussi choisir vos propres couleurs.

```{r}
#| eval: false
pal = c("#F3CAD2", "#E08BB1", "#AF4F91", "#6D1C68")
```

Ou cr√©er une palette sur mesure avec la fonction `mf_get_pal()`.

```{r}
#| eval: false
pal = mf_get_pal(n = c(6,3), palette = c("Burg", "Teal"))
```

## Carte de typologie

Pour cartographier des donn√©es qualitatives, on utilise `type = "typo"`.

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_map(x = africa,
       var = "region",
       type = "typo",
       breaks = "geom",
       border = "white")
mf_title(txt = "Les grandes r√©gions d'Afrique")
```

::: callout-tip
## Astuce

L‚Äôargument `val_order` sert √† ordonner les modalit√©s dans la l√©gende. Par exemple :

```{r}
#| eval: false
val_order = c("Northern Africa", "Eastern Africa", "Western Africa", "Middle Africa", "Southern Africa")
```
:::

## Combinaisons

Pour r√©aliser des cartes combinant deux variables, il est possible de superposer une carte choropl√®the et une carte de stock. Par exemple :

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_map(x = africa,
       var = "gdppc",
       type = "choro",
       nbreaks = 5,
       border = "white",
       leg_pos = "topleft",
       leg_title = "PIB par habitant\n(US$ courants)")
mf_map(x = africa,
       var = "pop",
       type = "prop",
       border = "black",
       leg_pos = "bottomleft",
       col = NA,
       leg_title = "Nombre d'habitants\nen 2020",
       inches	= 0.4)
mf_title(txt = "Population et richesse en Afrique")
```

Mais vous pouvez aussi utiliser le types `"prop_choro"` et `"prop_typo"`.

Dans ce cas, les choses se pr√©sentent comme ceci :

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_map(x = africa, border = "white", lwd = 0.5)
mf_map(x = africa,
       var = c("pop","gdppc"),
       type = "prop_choro",
       nbreaks = 5,
       border = "white",
       leg_pos = c("bottomleft","topleft"),
       leg_title = c("Nombre d'habitants\nen 2020", "PIB par habitant\n(US$ courants)"),
       inches	= 0.4)
```

Ou bien : 

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_map(x = africa, border = "white", lwd = 0.5)
mf_map(x = africa,
       var = c("pop","region"),
       type = "prop_typo",
       nbreaks = 5,
       border = "white",
       leg_pos = c("bottomleft","topleft"),
       leg_title = c("Nombre d'habitants\nen 2020", "R√©gions d'appartenance"),
       inches	= 0.4)
```

## Elements d'habillage

La package `mapsf` pemet d'ajouter plusieurs √©l√©ments d'habillage.

-   `mf_title()` permet d'ajouter un titre
-   `mf_credits()` permet d'afficher la source
-   `mf_scale()` ajoute une √©chelle
-   `mf_arrow()` ajoute une orientation.

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_map(x = africa, border = "white", lwd = 0.5)
mf_title(txt = "Population totale")
mf_credits(txt = "Source : Banque mondiale, 2024")
mf_scale()
mf_arrow()
```

Tous ces √©l√©ments sont personnalisables.

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_map(x = africa, border = "white", lwd = 0.5)
mf_title(txt = "Population totale", pos = "center", tab = FALSE, bg = "#6888ba")
mf_credits(txt = "Source : Banque mondiale, 2024", pos = "bottomright", cex = 1)
mf_scale(col = "red", scale_units = "mi", pos = "bottomleft")
mf_arrow(pos = "topright")
```

::: callout-tip
## Astuce

Tous ces √©l√©ments peuvent √™tre regroup√©s dans la fonction `mf_layout()`

```{r}
#| eval: false
mf_layout(
  title = "L'AfRique",
  credits = "Banque mondiale, 2024",
  arrow = TRUE, 
  scale = TRUE
)
```
:::

Avec `mf_shadow()` vous pouvez √©galement ajouter un ombrage.

Avec `mf_graticule()`, des lignes de latitude et longitude avec de belles annotations.

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_shadow(x = africa, col = "grey50", cex = 1)
mf_graticule(
  x = africa,
  col = "coral4",
  lwd = 2,
  lty = 2,
  expandBB = c(.1, 0, 0, .1),
  label = TRUE,
  pos = c("right", "bottom"),
  cex = .8,
  add = TRUE
)
mf_map(x = africa, border = "white", lwd = 0.5, add= TRUE)
```

## Textes et √©tiquettes

Vous pouvez ajouter des etiquettes avec la fonction `mf_label()`

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_map(x = africa, border = "white", lwd = 0.5)
mf_label( x = africa,
  var = "name",
  col= "black",
  halo = TRUE,
  overlap = FALSE,
  lines = TRUE)
```

Et une simple √©tiquette avec `mf_annotation()`

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_map(x = africa, border = "white", lwd = 0.5)
mf_annotation(
  x = africa[africa$ISO3 == "TUN", ],
  txt = "Tunisie",
  halo = TRUE,
  cex = 1.5,
  pos = "bottomleft"
)
```

## Les th√®mes

Une s√©rie de th√®mes pr√©d√©finis est disponible : `"default"`, `"brutal"`, `"ink"`, `"dark"`, `"agolalight"`, `"candy"`, `"darkula"`, `"iceberg"`, `"green"`, `"nevermind"`, `"jsk"`, `"barcelona"`.

Par exemple :

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_theme("nevermind")
mf_map(x = africa)
mf_title(txt = "Le th√®me nevermind")
```

Le syst√®me de th√®mes est tr√®s flexible. Vous pouvez prendre un th√®me et le modifier.

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_theme("nevermind", tab = TRUE, bg = "green")
mf_map(x = africa)
mf_title(txt = "Le th√®me nevermind modifi√©")
```

## Planches cartographiques

Avec R, il est ais√© de construire des figures contenant plusieurs graphiques, gr√¢ce √† l‚Äôargument `mfrow` de la fonction `par()`.

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 13
mf_theme("default")

opar <- par(mfrow = c(1, 2))

mf_map(x = africa,
       var = "gdppc",
       type = "choro",
       border = "white",
       leg_title = "PIB par habitant\n(US$ courants)",
       inches	= 0.4)

mf_map(x = africa,
       var = "elec",
       type = "choro",
       nbreaks = 4,
       border = "white",
       pal = "Magenta",
       leg_title = "Acc√®s √† l'√©lectricit√©\n(% de la pop)",
       inches	= 0.4)

par(opar)

```

## Cartons

La fonction `mf_inset_on()` permet de d√©marrer la cr√©ation d‚Äôun carton. Il faut ensuite ‚Äúrefermer‚Äù le carton avec `mf_inset_off()`.

```{r}
#| warning: false
#| fig-height: 6
#| fig-width:  6.36

# Carte principale
mf_map(africa)

# Petite carte
tun <- africa[africa$ISO3 == "TUN", ]
mf_inset_on(x = tun, pos = "topright", cex = .1)
mf_map(tun, col = "#e69749", border = "white")
mf_scale(pos = "bottomright")
box()
mf_inset_off()
# Fin de la petite carte

mf_title("Afrique et Tunisie")

```

## Exportez une carte

Enfin, la fonction `mf_export()` vous permet d'exporter vos cartes dans diff√©rents formats.

```{r}
mf_export(africa, filename = "macarte.svg")
mf_map(africa, add = TRUE)
dev.off()
```

## A vous de jouer

R√©alisez une carte sur un indicateur de votre choix. Si besoin, vous pouvez aller chercher d'autres indicateurs gr√¢ce au package `wbstats`

Si vous ne l'avez pas d√©j√† install√©, tapez ceci dans la console.

```{r}
#| eval: false
install.packages('wbstats')
```

```{r}
library(wbstats)
```

Par exemple

```{r}
wb_search(pattern = "Bird")
oiseaux_menaces <- wb_data("EN.BIR.THRD.NO", start_date = 2018, end_date = 2018)
head(oiseaux_menaces)
africa_birds <-  merge(
  x = geom[,"ISO3"],  
  y = oiseaux_menaces,  
  by.x = "ISO3",
  by.y = "iso3c",
  all.x = TRUE   
)
```

```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 6.36
mf_map(x = africa, border = NA, col = NA)
mf_map(x = world, border = "white", col = "#CCCCCC50", lwd = 0.5, add = TRUE)
mf_map(x = africa, border = "white", col = "#6893d9", lwd = 0.5, add = TRUE)
mf_map(x = africa_birds,
       var = "EN.BIR.THRD.NO",
       type = "prop",
       symbol = "square",
       border = "white",
       col = "#FF000080",
       leg_title = "Nombre d'oiseaux\nmenac√©s en 2018",
       inches	= 0.3)
```

# 3 - Cartogrammes

Il existe plusieurs m√©thodes pour r√©aliser des cartogrammes. Un certain nombre d'entre elles sont disponibles dans le package `cartogram`. Vous pouvez l'installer en tapant l'instruction suivante dans le console.

```{r}
#| eval: false
install.packages('cartogram')
```

## Cartogrammes de Dorling

```{r}
library(cartogram)
```

```{r}
pop2020_dorling <- cartogram_dorling(
  africa[!is.na(africa$pop),],
  weight = "pop",
  k=2.5
  )
```

```{r}
mf_map(africa, col = "white", border= NA)
mf_map(pop2020_dorling, col = "#5B89A3", border= "white", add = TRUE)
mf_label(
  x = pop2020_dorling[order(pop2020_dorling$pop, decreasing = TRUE), ][1:10,],
  var = "name",
  col = "#5B89A3",
  overlap = FALSE, lines = FALSE,
  halo = TRUE,
  r = .15
)
mf_title("Population totale - Cartogramme de Dorling")
```

## Les cartogrammes non continus

```{r}
afr_ncont <- cartogram_ncont(x = africa, weight = "pop", k = 1.2)
mf_map(africa, border = "white", lwd = 0.5,)
mf_map(afr_ncont, col = "#5B89A3", border= "white", add = TRUE)
mf_title("Population en Afrique - Cartogramme de Olson")
```

## Cartogrammes continus

```{r}
africa[is.na(africa$pop),"pop"] <- 1
afr_cont <- cartogram_cont(x = africa,
                           weight = "pop",
                           itermax = 30)
mf_map(afr_cont, col = "#5B89A3", border= "white", add = FALSE)
mf_title("Population en Afrique - Cartogramme de Dougenik")
mf_inset_on(africa, cex = .2, pos = "topleft")
mf_map(africa, lwd = .5, border = "white")
mf_inset_off()
```

## Aller plus loin

Pour en savoir plus sur les diff√©rentes formes de cartogrammes, vous pouvez aussi consulter ce document r√©alis√© en 2021 : [transcarto.github.io/rcartograms/TRANSCARTO_cartograms.html](https://transcarto.github.io/rcartograms/TRANSCARTO_cartograms.html)

# 4 - Cartographie Interactive

Le langage R permet d'embarquer des librairies en JavaScript dans des packages. Cela ouvre la possibilit√© de r√©aliser des proposer des outils de cartographie interactive. Ici, nous parlerons de 2 exemples principaux.

## mapview

Le package `mapview` permet de cr√©er rapidement et facilement des visualisations interactives de donn√©es spatiales avec ou sans fond de carte. Le package s'installe de la fa√ßon suivante :

```{r}
#| eval: false
install.packages('mapview')
```

```{r}
library(mapview)
```

```{r}
#| warning: false
mapview(africa) + mapview(st_centroid(africa))
```

## Leaflet

Leaflet est un package bas√© sur le JavaScript, permettant de faire de la cartographie interactive. On l'installe de la fa√ßon suivante :

```{r}
#| eval: false
install.packages('leaflet')
```

```{r}
library(leaflet)
```

R√©alisation d'une premi√®re carte simple

```{r}
m = leaflet() %>% addTiles()
m
```

Zoom sur une localisation pr√©cise.

```{r}
sfax <- c(10.760034694759957, 34.7407779744004)
m2 <- leaflet() %>% setView(lng = sfax[1], lat = sfax[2], zoom = 12) %>% 
  addTiles() 
m2
```

Ajout de g√©om√©tries

```{r}
africa_wgs84 <- st_transform(africa, 4326)
popup <- paste0("<b>",africa_wgs84$name,"</b><br/><b>Population: </b>", 
                africa_wgs84$pop)
m3 = leaflet() %>% 
  addTiles() %>% 
  addPolygons(data=africa_wgs84, weight = 2, fillColor = "yellow", popup= popup) %>%         
  addMarkers(data = st_centroid(africa_wgs84)) %>%  addMiniMap(position = "bottomright")
m3
```

## Au del√† de R

Avec Quarto, il est √©galement possible de cr√©er dans Rstudio, des cartes th√©matiques interactives pour le

**Pour celles et ceux qui le souhaitent, c'est ce que nous ferons vendredi matin**.

```{r}
#| echo: false
library("geojsonsf")
ojs_define(w = sf_geojson(world))
ojs_define(a = sf_geojson(africa))
```

```{ojs}
//| echo: false
viz = require("geoviz@0.6")
world = JSON.parse(w) 
africa = JSON.parse(a)
viewof size = Inputs.range([300, 790], {label: "Taille de la carte", value: 790, step: 1})
viewof k = Inputs.range([10, 100], {label: "Taille du plus gros cercle", value: 50, step: 1})
viewof dodge = Inputs.toggle({label: "√âcarter les cercles", value: false})
viewof leg_type = Inputs.radio(["separate", "nested"], {
  label: "Legende",
  value: "separate"
})

svg = viz.create({domain: africa, margin: 30, background:"#B5DFFD", width : size, zoomable:true})
header = svg.header({text: "Population en Afrique, 2020", background_fill:"#3c799e", fill: "white" })
path = svg.path({datum: world, fill:"white", fillOpacity:0.3})
afr = svg.path({data: africa, fill:"#3c799e", strokeWidth:0.5, filter: svg.effect.shadow()})
bubble = svg.plot({
    type: "prop",
    id: "bubble",
    data: africa,
    var: "pop",
    fill:"red",
    fillOpacity: 0.8,
 tip: (d) =>
    `Il y a ${Math.round(
      d.properties.pop / 1000000
    )} million d'habitants en ${d.properties.name}`,
    dodge,
    k,
    strokeWidth:0.5,
    filter: svg.effect.shadow(),
    leg_pos: [60, 400],
    leg_type,
    leg_title: "Nombre d'habitants",
    leg_subtitle: "(en millions)",
    leg_values_round:0,
    leg_note: "Source: Banque mondiale, 2024",
    leg_values_factor: 1/1000000
})
svg.render({order: [header, path, afr, bubble]})
```
